name: build

on: push

env:
  VERSION: 0.0.0
  PUBLISH: never

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Run linter
        run: yarn run lint

      - name: Set Webpack build arguments
        shell: bash
        run: echo '::set-env name=ELECTRON_WEBPACK_APP_SENTRY_DSN::'${{ secrets.sentry_dsn }}

      - name: Compile Webpack
        run: yarn run compile

      - name: Prepare for release (common)
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          echo '::set-env name=GH_TOKEN::'${{ secrets.github_token }}
          echo '::set-env name=VERSION::$(echo '${{ github.ref }}' | cut -d / -f 3 | tr -d v)'
          echo '::set-env name=PUBLISH::always'
          yarn run downloadBinary
        env:
          GH_TOKEN: ${{ secrets.github_token }}

      - name: Prepare for release (MacOS)
        if: ${{ startsWith(github.ref, 'refs/tags/v') && startsWith(matrix.os, 'macos') }}
        shell: bash
        run: |
          # for signing
          echo '::set-env name=CSC_LINK::'${{ secrets.mac_certs }}
          echo '::set-env name=CSC_KEY_PASSWORD::'${{ secrets.mac_certs_password }}

          # for notarization
          echo '::set-env name=API_KEY_ID::'${{ secrets.api_key_id }}
          echo '::set-env name=API_KEY_ISSUER_ID::'${{ secrets.api_key_issuer_id }}
          mkdir -p ~/private_keys/ && echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8

      - name: Build and release Electron app
        run: yarn run electron-builder --${{ matrix.platform }} --publish ${{ env.PUBLISH }} --config.extraMetadata.version=${{ env.VERSION }}
